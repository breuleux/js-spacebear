
require-macros:
   earl-mocha ->
      describe, it, before, after, before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error

require:
   ..src ->
      identify, deprox
      read-proxy, write-proxy
      Directory
      changed-relevantly, intersect
      ID, FORKID
      Patch, Tracks


class Person:
   constructor{props} =
      [@] &: props
   say-name{} =
      'Hello, my name is {@name}!'
   get-older{n = 1} =
      @age += n

identify! alice = Person{name = .alice, age = 55}
identify! bob = Person{name = .bob, age = 60}
identify! clara = Person{name = .clara, age = 20, mother = alice, father = bob}
identify! donald = Person{name = .donald, age = 10}

aid = alice[ID]
bid = bob[ID]
cid = clara[ID]
did = donald[ID]


describe "read-proxy":

   before-each:
      @tracks = Tracks{} ;;{=}
      @clara = read-proxy{clara, @tracks}

   it "shallow":
      {@clara.name, @clara.age}
      assert @tracks._data{} == {cid => {name = true, age = true}}

   it "methods":
      @clara.say-name{}
      assert @tracks._data{} == {cid => {name = true}}

   it "deep":
      {@clara.name, @clara.mother.age}
      assert @tracks._data{} == {
         cid => {name = true, mother = true}
         aid => {age = true}
      }


describe "write-proxy":

   before-each:
      @patch = Patch{}
      @clara = write-proxy{clara, @patch}

   it "shallow":
      @clara.name = .clairette
      @clara.age = 21
      assert @patch._data{} == {
         cid => {
            name = #update{.clairette}
            age = #update{21}
         }
      }

   it "methods":
      @clara.get-older{10}
      assert @patch._data{} == {
         cid => {
            age = #update{30}
         }
      }

   it "deep":
      @clara.name = .clairette
      @clara.mother.age = 21
      assert @patch._data{} == {
         cid => {
            name = #update{.clairette}
         }
         aid => {
            age = #update{21}
         }
      }

   it "disallow reading what was just written":
      @clara.name
      @clara.name = .clairette
      expect-error:
         @clara.name


describe "array-proxy":

   describe "read":

      before-each:
         @tracks = Tracks{} ;;{=}
         @arr = {1, 2, 3}
         @p = read-proxy{@arr, @tracks}
         @id = @arr[ID]
         @assert-iter{start = 0, end = 3, sticky = true} =
            assert @tracks._data{} == {
               @id => {"@iter" => {start, end, sticky}}
            }

      it "get":
         assert @p.get{0} === 1
         assert @p.get{1} === 2
         assert @tracks._data{} == {
            @id => {0 => true, 1 => true}
         }

      it "length":
         assert @p.length === 3
         assert @tracks._data{} == {
            @id => {length = true}
         }

      it "iterator":
         assert [@p each x -> x] == {1, 2, 3}
         @assert-iter{}

      it "map":
         assert @p.map{x -> x} == {1, 2, 3}
         @assert-iter{}

      it "for-each":
         acc = {}
         @p.for-each{x -> acc.push{x}}
         assert acc == {1, 2, 3}
         @assert-iter{}

      it "join":
         assert @p.join{"|"} == "1|2|3"
         @assert-iter{}

      it "to-string":
         assert String{@p} == "{1, 2, 3}"
         @assert-iter{}

      it "whole slice":
         assert [@p.slice{0} each x -> x] == {1, 2, 3}
         @assert-iter{}

      it "whole slice, explicitly specified upper bound":
         assert [@p.slice{0, 3} each x -> x] == {1, 2, 3}
         @assert-iter{0, 3, false}

      it "subslice":
         assert [@p.slice{1, 2} each x -> x] == {2}
         @assert-iter{1, 2, false}

      it "subslice, no upper bound":
         assert [@p.slice{1} each x -> x] == {2, 3}
         @assert-iter{1, 3, true}

   describe "read (deep)":

      before-each:
         @tracks = Tracks{} ;; {=}
         @arr = {identify! {alice}, bob, clara}
         @p = read-proxy{@arr, @tracks}
         @id = @arr[ID]
         @id2 = @arr[0][ID]

      it "get":
         {=> name, => age} = @p.get{1}
         assert @tracks._data{} == {
            @id => {1 => true}
            bid => {name = true, age = true}
         }

      it "get (2)":
         @p.get{0}.get{0}.name
         assert @tracks._data{} == {
            @id => {0 => true}
            @id2 => {0 => true}
            aid => {name = true}
         }

      it "subslice":
         @p.slice{1} each entry -> entry.name
         assert @tracks._data{} == {
            @id => {"@iter" => {1, 3, true}}
            bid => {name = true}
            cid => {name = true}
         }


   describe "write":

      before-each:
         @patch = Patch{}
         @arr = {1, 2, 3}
         @p = write-proxy{@arr, @patch}
         @id = @arr[ID]
         @spldata{} = @patch.get{@id}["@splice"]

      it "set":
         @p.set{0, 11}
         @p.set{1, 22}
         @p.set{2, 33}
         assert @spldata{} == {
            {1, {11}}
            {1, {22}}
            {1, {33}}
            undefined
         }

      it "push":
         @p.push{11}
         @p.push{22, 33}
         assert @spldata{} == {
            undefined
            undefined
            undefined
            {0, {11, 22, 33}}
         }

      it "pop":
         @p.pop{2}
         assert @spldata{} == {
            undefined
            {2, {}}
            true
            undefined
         }

      it "shift":
         @p.shift{2}
         assert @spldata{} == {
            {2, {}}
            true
            undefined
            undefined
         }

      it "unshift":
         @p.unshift{11}
         @p.unshift{22, 33}
         assert @spldata{} == {
            {0, {22, 33, 11}}
            undefined
            undefined
            undefined
         }

      it "replace":
         @p.replace with {11, 22, 33}
         assert @spldata{} == {
            {3, {11, 22, 33}}
            true
            true
            undefined
         }

      it "complex case":
         @p.unshift{11}
         @p.push{22}
         @p.splice{1, 2}
         assert @spldata{} == {
            {0, {11}}
            {2, {}}
            true
            {0, {22}}
         }

   describe "write (deep)":

      before-each:
         @patch = Patch{}
         @arr = {identify! {alice}, bob, donald}
         @p = write-proxy{@arr, @patch}
         @id = @arr[ID]
         @id2 = @arr[0][ID]
         @spldata{} = @patch.get{@id}["@splice"]
         @spldata2{} = @patch.get{@id2}["@splice"]

      it "set":
         @p.set{2, donald}
         assert @spldata{} == {
            undefined
            undefined
            {1, {donald}}
            undefined
         }

      it "set (2)":
         @p.get{0}.set{0, donald}
         assert @spldata2{} == {
            {1, {donald}}
            undefined
         }

      it "set (3)":
         @p.get{0}.get{0}.name = .athena
         assert @patch._data{} == {
            @id => {=}
            @id2 => {=}
            aid => {name = #update{.athena}}
         }
