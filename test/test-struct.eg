
require-macros:
   "../src/struct" ->
      struct
   earl-mocha ->
      describe, it, before, after, before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error

require:
   "../src/struct" ->
      make-struct, read-proxy
      changed-relevantly


struct Person:
   name, age, mother, father
   ;; String? name
   ;; Number? age
   ;; Person? mother or null? mother = null
   ;; Person? father or null? father = null
   say-name{} =
      'My name is {@name}!'
   get-older{n = 1} =
      @age += n

alice = Person{name = .alice, age = 51}
bob = Person{name = .bob, age = 56}
clara = Person{name = .clara, age = 20, mother = alice, father = bob}

aid = alice["::id"]
bid = bob["::id"]
cid = clara["::id"]

describe "structs":

   it "store information":
      assert alice.name == .alice
      assert clara.age == 20
      assert clara.mother.name == .alice
      assert clara.father.name == .bob

   it "are immutable":
      expect-error Error:
         alice.name = .balice
      expect-error Error:
         clara.mother.name = .balice

   it "can have methods":
      assert alice.say-name{} == "My name is alice!"
      assert bob.say-name{} == "My name is bob!"

   it "cannot be mutated through methods":
      expect-error Error:
         alice.get-older{}


describe "fork":

   before-each:
      @clara = clara.fork{true}

   it "preserves information":
      assert @clara.name == .clara
      assert @clara.age == 20
      assert @clara.mother.name == .alice
      assert @clara.father.name == .bob

   it "is deep":
      assert @clara !== clara
      assert @clara.mother !== clara.mother
      assert @clara.father !== clara.father


describe "read-proxy":

   before-each:
      @data = {=}
      @clara = clara.read-proxy{@data}

   it "tracks reads (shallow)":
      {@clara.name, @clara.age}
      assert @data == {cid => {name = true, age = true}}

   it "tracks reads (through methods)":
      @clara.say-name{}
      assert @data == {cid => {name = true}}

   it "tracks reads (deep)":
      {@clara.name, @clara.mother.age}
      assert @data == {
         cid => {name = true, mother = true}
         aid => {age = true}
      }

   it "can store a predetermined key":
      @data = {=}
      @clara = clara.read-proxy{@data, 1234}
      {@clara.name, @clara.mother.age}
      assert @data == {
         cid => {name = 1234, mother = 1234}
         aid => {age = 1234}
      }


describe "write-proxy":

   before-each:
      @data = {=}
      @clara = clara.write-proxy{@data}

   it "tracks writes (shallow)":
      @clara.name = .clairette
      @clara.age = 21
      assert @data == {
         cid => {
            name = #update{.clairette}
            age = #update{21}
         }
      }

   it "tracks writes (through methods)":
      @clara.get-older{10}
      assert @data == {
         cid => {
            age = #update{30}
         }
      }

   it "tracks writes (deep)":
      @clara.name = .clairette
      @clara.mother.age = 21
      assert @data == {
         cid => {
            name = #update{.clairette}
         }
         aid => {
            age = #update{21}
         }
      }

   it "disallows reading what was just written":
      @clara.name
      @clara.name = .clairette
      expect-error true:
         @clara.name


describe "patch":

   before-each:
      @data = {=}
      @clara = clara.fork{true}
      @clarap = @clara.write-proxy{@data}

   it "updates mutable structures (shallow)":
      @clarap.name = .clairette
      @clarap.age = 21
      assert @clara.name == .clara
      assert @clara.age == 20
      @clara.patch{@data}
      assert @clara.name == .clairette
      assert @clara.age == 21

   it "updates mutable structures (deep)":
      @clarap.name = .clairette
      @clarap.mother.age = 21
      assert @clara.name == .clara
      assert @clara.mother.age == 51
      @clara.patch{@data}
      assert @clara.name == .clairette
      assert @clara.mother.age == 21


describe "changed-relevantly":

   before-each:
      @tracks = {=}
      @patch = {=}
      @clara = clara.fork{true}
      @clarar = @clara.read-proxy{@tracks}
      @claraw = @clara.write-proxy{@patch}

   it "tracks relevant changes":
      @clarar.name
      @claraw.name = .clairette
      assert @clara.changed-relevantly{@tracks[cid], @patch[cid]}
      assert changed-relevantly{@tracks, @patch}

   it "does not track irrelevant changes":
      @clarar.name
      @claraw.age = 20
      assert not @clara.changed-relevantly{@tracks[cid], @patch[cid]}
      assert not changed-relevantly{@tracks, @patch}

   it "operates on individual objects":
      @clarar.name
      @clarar.mother.age
      @claraw.mother.age = 20
      assert not @clara.changed-relevantly{@tracks[cid], @patch[cid]}
      assert @clara.mother.changed-relevantly{@tracks[aid], @patch[aid]}
      assert changed-relevantly{@tracks, @patch}


