
require-macros:
   "../src/struct" ->
      struct
   earl-mocha ->
      describe, it, before, after, before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error

require:
   "../src/index" ->
      identify
      make-struct, read-proxy, write-proxy
      fork, directory, Directory
      patch, changed-relevantly, intersect
      clobber
      ID, FORKID
   "./people" ->
      alice, bob, clara, donald
      aid, bid, cid, did


describe "clobber":

   before-each:
      identify! @x = {a = 1, b = 2}
      @xid = @x[ID]
      @clobber{y, expect-clobber = true} =
         rval = clobber{@x, y}
         assert rval == y
         if expect-clobber:
            assert rval === @x
            assert rval !== y
         else:
            assert rval !== @x
            assert rval === y
         rval

   it "works":
      @clobber{{a = 3, b = 4}}

   it "deletes missing properties":
      @clobber{{b = 2}}

   it "deletes all properties":
      @clobber{{=}}

   it "adds new properties":
      @clobber{{a = 3, b = 4, c = 5}}

   it "transfers ID":
      y = identify{{a = 3, b = 4, c = 5}}
      r = @clobber{y}
      assert r[ID] === y[ID]
      assert r[ID] !== @xid

   it "recursive":
      x = identify{{x = identify{{a = 1, b = 2}}, y = identify{{c = 3, d = 4}}}}
      y = identify{{x = identify{{a = 6, m = 7}}, y = identify{{n = 9}}}}
      r = clobber{x, y}
      assert x == y

   it "can only clobber if same prototype":
      y = Object.create{{=}}
      @clobber{y, false}

   it "wrap":
      test-wrap{x} = 'success {x.join{" "}}'
      x = {a = 1, b = 2}
      y = {1, 2, 3}
      r = clobber{x, y, test-wrap}
      assert r == 'success 1 2 3'

   it "wrap deep":
      test-wrap{x} = 'success {x.join{" "}}'
      x = {a = {x = 1, y = 2}}
      y = {a = {1, 2, 3}}
      r = clobber{x, y, test-wrap}
      assert r == {a = 'success 1 2 3'}

   it "array":
      x = {1, 2, 3, 4}
      y = {5, 6}
      r = clobber{x, y}
      assert r == y

   it "array reorders elements":
      a = identify{{a = 1}}
      b = identify{{b = 2}}
      x = {a, b}
      y = {fork{b} &: {b = 3}, fork{a} &: {a = 4}}
      r = clobber{x, y}
      assert r == {{b = 3}, {a = 4}}
      assert r[0] === b
      assert r[1] === a

   it "array does not re-clobber duplicate elements":
      a = identify{{a = 1}}
      b = identify{{b = 2}}
      x = {a, b, a}
      y = {fork{b} &: {b = 3}, fork{a} &: {a = 4}, {c = 7}}
      r = clobber{x, y}
      assert r == {{b = 3}, {a = 4}, {c = 7}}
      assert r[0] === b
      assert r[1] === a
