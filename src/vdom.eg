
require:
   lodash ->
      flatten, kebab-case
   .util ->
      ID, CACHE, tuck, identify, fork-identify, methods
   .directory ->
      object-clobber-helper
      array-clobber-helper

provide:
   VNode
   EVNode as ENode

globals:
   document, Element


;;;;;;;;;;;
;; VNode ;;
;;;;;;;;;;;

child-at{node, i} =
   node.child-nodes[i] or null

remove-at-index{node, i} =
   match child-at{node, i}:
      undefined? -> pass
      child -> node.remove-child{child}

insert-at-index{node, i, elem} =
   anchor = child-at{node, i}
   if elem !== anchor:
      node.insert-before{elem, anchor}

to-string{match x} =
   undefined? -> ""
   else -> String{x}


class VNode:

   constructor{@tag, @props, flatten! @children, @options = {=}} =
      {raw => @raw = false
       namespace => @namespace = null} = @options
      @dom-node = null

   install{} =
      if @dom-node:
         return @dom-node

      node and @dom-node =
         if @namespace:
            document.create-element-NS{@namespace, @tag}
         else:
            document.create-element{@tag}

      items{@props} each {k, v} -> @set-attribute{k, v}

      if @raw:
         node.innerHTML = to-string{@raw}

      @children-elements{} each c ->
         node.append-child{c}

      node

   set-attribute{match attr, value} =
      do:
         if not @dom-node: return
      .style when not String? value ->
         @dom-node.set-attribute{.style, props.join{";"}} where
            props = items{value} each {k, v} ->
               '{kebab-case{k}}:{v}'
      .class or .class-name ->
         @dom-node.class-name = value.join{" "}
      .id or .value or R"^on"? ->
         @dom-node[attr] = value
      else ->
         @dom-node.set-attribute{attr, value}

   children-elements{} =
      @children each c -> @child-to-element{c}

   child-to-element{match c} =
      VNode? ->
         c.install{}
      Element? ->
         c
      else ->
         document.create-text-node{to-string{c}}

   [^methods.proxy]{tracks, patch, prevent-dirty-reads} =
      throw E.not-implemented{"VNode instances cannot be proxied."}

   [^methods.iterate-properties]{} =
      id = self[ID]
      gen-patch{k}{patch, new-v} =
         patch.get-for{@}[k] = #update{new-v}

      var results = {
         {'raw/', @raw, gen-patch{'raw/'}}
      }

      results ++=
         items{@props} each {k, value} ->
            {k, value, gen-patch{k}} where
               k = 'attribute/{k}'

      results ++=
         enumerate{@children} each {i, child} ->
            {k, child, gen-patch{k}} where
               k = 'child/{i}'

      results

   [^methods.fork]{dir} =
      rval = VNode{
         @tag
         object with items{@props} each
            {k, v} -> {k, dir.acquire{v}}
         @children each c -> dir.acquire{c}
         {raw = @raw and dir.acquire{@raw}
          namespace = @namespace}
      }
      {ID, CACHE} each field ->
         tuck{rval, field, self[field]}
      fork-identify{rval}
      dir.enter{rval, false}
      rval

   [^methods.patch]{patch, dir} =
      ;; patches = patch[self[ID]]
      patches = patch.get-for{self}

      if not patches:
         return

      items{patches} each {match field, #update{new-value}} ->
         "raw/" ->
            @raw = dir.replace{@raw, new-value}
            if @dom-node:
               @dom-node.innerHTML = to-string{@raw}
         R"^attribute/(.*)$"! {_, attr} ->
            @props[attr] = dir.replace{@props[attr], new-value}
            @set-attribute{attr, @props[attr]}
         R"^child/(.*)$"! {_, Number! i} ->
            @children[i] = dir.replace{@children[i], new-value}
            if @dom-node:
               @dom-node.replace-child{
                  @child-to-element{@children[i]}
                  @dom-node.child-nodes[i]
               }

   [^methods.clobber]{new-vdom, dir} =
      if not VNode? new-vdom:
         return dir.acquire{new-vdom}

      ;; Cannot change tags
      if new-vdom.tag !== @tag or new-vdom.namespace !== @namespace:
         return dir.acquire{new-vdom}

      dir.exit{@}

      if @raw != new-vdom.raw:
         @raw = dir.clobber{@raw, new-vdom.raw}
         if @dom-node:
            @dom-node.innerHTML = to-string{@raw}

      object-clobber-helper{
         @props, new-vdom.props, items
         {a, b} -> Object.has-own-property.call{a, b}
      } each
         #delete{attr} ->
            delete @props[attr]
            if @dom-node:
               @dom-node.remove-attribute{attr}
         #put{attr, value} ->
            @props[attr] = dir.clobber{@props[attr], value}
            @set-attribute{attr, @props[attr]}

      child-nodes =
         if @dom-node: @dom-node.child-nodes each c -> c
         else: null

      array-clobber-helper{@children, new-vdom.children} each

         #clobber{i, value} ->
            old-child = @children[i]
            new-child and @children[i] = dir.clobber{old-child, value}
            if @dom-node and old-child !== new-child:
               @dom-node.replace-child{
                  @child-to-element{new-child}
                  child-nodes[i]
               }

         #splice{var start, var n, inserts} ->
            acquired = inserts each
               #keep{x} -> x
               #acquire{x} -> dir.acquire{x}
            @children.splice{start, n, *acquired}
            if @dom-node:
               while n > 0
                   \ and child-at{@dom-node, start}
                         \ === @child-to-element{acquired[0]}:
                  start += 1
                  n -= 1
               0...n each _ ->
                  remove-at-index{@dom-node, start}
               enumerate{acquired} each {i, c} ->
                  insert-at-index{@dom-node, start + i, @child-to-element{c}}

      tuck{@, ID, new-vdom[ID]}
      dir.enter{@}
      @


;;;;;;;;;;;;;;;;
;; % builders ;;
;;;;;;;;;;;;;;;;

tag_namespaces = {=}
[tags each tag -> tag_namespaces[tag] = "http://www.w3.org/2000/svg"] where
   tags = {
      .svg
      .circle, .line, .path, .rect, .text, .g
   }

extract{tags, props} =
   var tag = .span
   var id = null
   var raw = null
   var classes = match props:
      {class => Array! c} or {class-name => Array! c} -> c
      else -> {}
   tags each
      R"^\.(.*)"! {_, name} -> classes.push with name
      R"^#(.*)"! {_, name} -> set-var id = name
      .raw -> set-var raw = true
      x -> set-var tag = x
   {tag, id, classes, raw}

EVNode{tags, props, Array! children} =
   {tag, id, classes, raw} = extract{tags, props}
   if id:
      if props.id:
         throw E.duplicate_id{"Duplicate id: " + id + " " + props.id}
      else:
         props.id = id
   if classes.length > 0:
      props.class = classes

   namespace = tag_namespaces[String! tag]

   if raw:
      {child} = children
      VNode{tag, props, {}, {raw = child, namespace = namespace}}
   else:
      VNode{tag, props, children, {namespace = namespace}}
