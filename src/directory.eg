
require:
   "./util" ->
      identify, fork-identify, tuck
      next-id, ID, FORKID, VERSION, DIRECTORY, CACHE
      longest-run
   "./proxy" ->
      deprox
   "./iter" ->
      iterate-properties


provide:
   Directory, directory
   object-clobber-helper


class Directory:

   constructor{@options = {=}} =
      ;; Tie @duplicate to @clobber-patch by default, since they should
      ;; usually have the same value.
      {clobber-patch => @clobber-patch = false
       duplicate => @duplicate = @clobber-patch} = @options
      @dir = {=}
      @version = 1

   get-all{id} =
      match @dir[id]:
         undefined? -> {}
         {_, v} -> {v}
         objs -> items{objs} each {k, {_, v}} -> v

   get{id} =
      @get-all{id}[0]

   get-canon{v} =
      v and v[ID] and @get{v[ID]} or v

   enter{deprox! match value, add-children = true} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         value
      do:
         identify! value
         fork-identify! value
      when not @duplicate ->
         {@dir[value[ID]], return} =
            match @dir[value[ID]]:
               undefined? ->
                  tuck{value, DIRECTORY, @}
                  if add-children:
                     iterate-properties{value} each {k, v2, replace} ->
                        @enter{v2, true}
                  {{1, value}, value}
               {count, value} ->
                  {{count + 1, value}, value}

      else ->
         sub = [@dir[value[ID]] or= {=}]
         fid = value[FORKID]
         match sub[fid]:
            undefined? ->
               tuck{value, DIRECTORY, @}
               sub[fid] = {1, value}
               if add-children:
                  iterate-properties{value} each {k, v2, replace} ->
                     @enter{v2, true}
               value
            {count, value} ->
               sub[fid] = {count + 1, value}
               value

   exit{match v, remove-children = true} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         @
      deprox! v ->
         {d, k} =
            if @duplicate:
               sub = [@dir[v[ID]] or= {=}]
               {sub, v[FORKID]}
            else:
               {@dir, v[ID]}
         match d[k]:
            undefined? ->
               pass
            {match count, v} ->
               > 1 ->
                  d[k] = {count - 1, v}
               else ->
                  delete d[k]
                  delete v[DIRECTORY]
                  if remove-children:
                     iterate-properties{v} each {k, v2, replace} ->
                        @exit{v2, true}

   acquire-copy{deprox! v} =
      if v and not v[DIRECTORY]:
         ;; v can't belong to more than one directory, so we
         ;; acquire it with a throwaway Directory
         Directory{}.acquire{v}
      @acquire{v}

   acquire{deprox! match v} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         v
      identify! [{^DIRECTORY => d} or d is undefined] and match is d ->
         === [@] ->
            if{@duplicate, @fork{@get-canon{v}}, v}
         undefined? when @duplicate ->
            @fork{@get-canon{v}}
         undefined? ->
            @enter{v}
            iterate-properties{v} each {k, v2, replace} ->
               match @acquire{v2}:
                  !== v2 ->
                     throw E.acquire with
                        "Child of acquired node belongs to other directory."
                  else ->
                     pass
            v
         else ->
            @fork{@get-canon{v}}

   acquire-get{v} =
      match @get{v[ID] or -1}:
         undefined? -> @acquire{v}
         x -> x

   fork{identify! match value} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         value
      when not @duplicate and @get{value[ID]} ->
         @get{value[ID]}
      {fork => Function?} ->
         throw E.not-implemented{}
         deprox{value}.fork{@}
      Array? ->
         array-fork{deprox{value}, @}
      else ->
         object-fork{deprox{value}, @}

   clobber{identify! match value, identify! new-value} =
      null? or undefined? or Number? or String? or Symbol? or Boolean? ->
         new-value
      when value[ID] === new-value[ID] ->
         value
      {clobber => Function?} ->
         deprox{value}.clobber{new-value, @}
      Array? ->
         array-clobber{deprox{value}, new-value, @}
      else ->
         object-clobber{deprox{value}, new-value, @}

   replace{old-value, new-value} =
      if @clobber-patch:
         @clobber{old-value, @get-canon{new-value}}
      else:
         v = @acquire{new-value}
         @exit{old-value}
         v

   patch{p} =
      ;; TODO: investigate what happens when a patch introduces an
      ;; item with, say, ID == x, which needs to be patched, but the
      ;; patch for ID == x was applied before. This should be ok if
      ;; the item is already in the directory, otherwise it may fail.
      @version += 1
      items{p} each {id, obj-patch} ->
         @get-all{id} each obj ->
            patch-shallow{obj, p, @}



;;;;;;;;;;;;;;;;;;
;; FORK HELPERS ;;
;;;;;;;;;;;;;;;;;;

array-fork{deprox! identify! arr, dir} =
   rval = {}
   {ID, CACHE} each field ->
      tuck{rval, field, arr[field]}
   fork-identify{rval}
   dir.enter{rval, false}
   arr each x ->
      rval.push{dir.acquire{x}}
   rval

object-fork{deprox! identify! obj, dir} =
   rval = Object.create{Object.get-prototype-of{obj}}
   {ID, CACHE} each field ->
      tuck{rval, field, obj[field]}
   fork-identify{rval}
   dir.enter{rval, false}
   items{obj} each {key, value} ->
      rval[key] = dir.acquire{value}
   rval

directory{v, dir = Directory{}} =
   dir.acquire{v}



;;;;;;;;;;;;;;;;;;;
;; PATCH HELPERS ;;
;;;;;;;;;;;;;;;;;;;

patch-shallow{deprox! match value, p, dir} =
   null? or undefined? or Number? or String? or Symbol? or Boolean? ->
      pass
   {patch => Function?} ->
      deprox{value}.patch{p, dir}
   Array? arr ->
      array-patch{arr, p, dir}
   obj ->
      object-patch{obj, p, dir}
      undefined

object-patch{obj, p, dir, wrapper = obj} =
   identify{wrapper}
   match p[wrapper[ID]]:
      undefined? -> pass
      items! [each {field, match}] ->
         #update{value} ->
            obj[field] = dir.replace{obj[field], value}
   obj

array-patch{arr, p, dir, wrapper = arr} =
   identify{wrapper}
   splices = p??[wrapper[ID]]??["@splice"]
   if not splices:
      return
   enumerate{splices}.reverse{} each {i, match} ->
      {n, repl} ->
         previous = arr.splice{i, n}
         var acq =
            zip{repl.slice{0, previous.length}, previous} each {newv, oldv} ->
               dir.replace{oldv, newv}
         acq ++= repl.slice{previous.length} each newv ->
            dir.acquire{newv}
         previous.slice{repl.length} each oldv ->
            dir.exit{oldv}
         arr.splice{i, 0, *acq}
      else ->
         pass
   undefined



;;;;;;;;;;;;;;;;;;;;;
;; CLOBBER HELPERS ;;
;;;;;;;;;;;;;;;;;;;;;

object-clobber-helper{obj, new-obj, items, owns} =
   operations = {}
   items{obj} each
      {k, v} when not owns{new-obj, k} ->
         operations.push with #delete{k}
   items{new-obj} each {k, match v} ->
      do: v0 = obj[k]
      === v0 or when v0 and v0[ID] and v and v[ID] == v0[ID] ->
         pass
      else ->
         operations.push with #put{k, v}
   operations

object-clobber{obj, new-obj, dir} =

   if Object.get-prototype-of{obj} !== Object.get-prototype-of{new-obj}:
      return dir.acquire{new-obj}

   dir.exit{obj}

   object-clobber-helper{
      obj, new-obj, items
      {a, b} -> Object.has-own-property.call{a, b}
   } each
      #delete{k} ->
         delete obj[k]
      #put{k, v} ->
         obj[k] = dir.clobber{obj[k], v}

   tuck{obj, ID, new-obj[ID]}
   dir.enter{obj}

   obj


array-clobber{arr, new-arr, dir} =

   if not Array? new-arr:
      return dir.acquire{new-arr}

   dir.exit{arr}

   ;; 1. For each element of the new array, find the index of the
   ;; corresponding element in the old array.

   ;; 2. Find the longest filtering of the array of indices such
   ;; that the indices are in order.

   ;; 3. Splice the data around these fixed points, which should
   ;; amount to the minimal splicing that transforms the array

   idpos = {=}
   enumerate{arr} each {i, match x} ->
      {^ID => Number? id} -> idpos[id] = {i, x}
      else -> continue

   indices = enumerate{new-arr} each {i, match x} ->
      {^ID => Number? id} when idpos[id] -> {i, idpos[id][0]}
      else -> continue

   run = longest-run{indices, cmp, {-1, -1}} where
      cmp{{_, p1}, {_, p2}} = p1 < p2

   orig = arr each x -> x

   if dir.duplicate:
      run each {new-i, old-i} ->
         ;; These will be automatically preserved
         delete idpos[orig[old-i][ID]]

   run.push with {new-arr.length, arr.length}

   var old-current = 0
   var new-current = 0
   run each {new-i, old-i} ->
      inserts = new-arr.slice{new-current, new-i} each
         entry and {_, orig} is idpos[entry[ID] or -1] when dir.duplicate ->
            ;; We can recover this entry; however dir.duplicate prevents
            ;; us from having the same reference more than once in the
            ;; tree, so we remove it from idpos so we can't reuse it.
            delete idpos[entry[ID]]
            orig
         entry ->
            dir.acquire{entry}
      arr.splice{new-current, old-i - old-current, *inserts}
      old-current = old-i + 1
      new-current = new-i + 1

   tuck{arr, ID, new-arr[ID]}
   dir.enter{arr}
   arr
