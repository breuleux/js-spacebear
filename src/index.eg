
require:
   spacecore ->
      reactive-function2
      deprox, transact-all
   .vdom ->
      VNode, ENode as EVNode, custom-components
   .render ->
      RenderState

provide = spacecore

provide:
   VNode, EVNode as ENode
   RenderState
   custom-components
   percent as [%]
   reactive
   component
   transact


macro{EVNode} percent{#data{x, y}} =
   let {=> EVNode} = @deps
   `[^x % ^y] where ENode = [^EVNode]`

macro{reactive-function2} reactive{expr} =
   let {"reactive-function2" => rfn} = @deps
   {system, it, self} = @mark{`system`, `@`, `self`}
   @multimacro with {
      project{match expr} =
         `_lambda{^args, ^pre, ^body, ^post, ^gen}` ->
            ```
            [^rfn]{_lambda{^args, ^pre, [let ^it and ^self = this, ^body], ^post, ^gen}}
            ```
         `^args -> ^body` ->
            ```
            [^rfn] with
               ^args ->
                  let ^it and ^self = this
                  ^body
            ```
         else ->
            print expr
            throw E.syntax.invalid-reactive{"invalid", node = expr}
   }

macro{deprox, custom-components, reactive-function2} component{`{^name, ^body}`} =
   let {=> deprox
        "custom-components" => cc
        "reactive-function2" => rfn} = @deps
   {it, self} = @mark{`@`, `self`}
   #symbol{s} = name
   ```
   let [^name] =
      [^rfn]! rval{props, children} =
         let ^it and ^self = {
            props = [^deprox]{props}
            children = [^deprox]{children}
            root = this
         }
         ^body
      [^cc][^=s] = rval
      rval
   ```

macro{transact-all} transact{#data{body}} =
   let {"transact-all" => tra} = @deps
   `[^tra] with {_} -> ^body`
