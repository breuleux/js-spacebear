
require:
   "./util" ->
      identify, tuck, ID, CLOBBERID, VERSION
   "./proxy" ->
      deprox

provide:
   clobber


clobber{match value, new-value, wrap = x -> x} =

   null? or undefined? or Number? or String? or Symbol? or Boolean? ->
      new-value

   {clobber => Function?} ->
      deprox{value}.clobber{new-value, wrap}

   Array? ->
      array-clobber{deprox{value}, new-value, wrap}

   else ->
      object-clobber{deprox{value}, new-value, wrap}


array-clobber{arr, new-arr, wrap} =

   if not Array? new-arr:
      return wrap{new-arr}

   idpos = {=}
   enumerate{arr} each {i, match x} ->
      when x[ID] ->
         idpos[x[ID]] = {i, x}

   enumerate{new-arr} each {match i, v} ->
      > arr.length ->
         arr.push{wrap{v}}
      else ->
         v0 = arr[i]
         vid = v[ID]
         if vid and idpos[vid]:
            {j, x} = idpos[vid]
            delete idpos[vid]
            if j > i: arr[j] = null
            arr[i] = clobber{x, v, wrap}
         else:
            arr[i] = clobber{v0, v, wrap}

   delta = arr.length - new-arr.length
   if delta > 0:
      arr.splice{new-arr.length, delta}

   arr


object-clobber{obj, new-obj, wrap} =
   if Object.get-prototype-of{obj} !== Object.get-prototype-of{new-obj}:
      return wrap{new-obj}
   items{obj} each
      {k, v} when not Object.has-own-property.call{new-obj, k} ->
         delete obj[k]
   items{new-obj} each {k, match v} ->
      do: v0 = obj[k]
      === v0 or when v0 and v0[ID] and v and v[ID] == v0[ID] ->
         pass
      else ->
         obj[k] = clobber{obj[k], v, wrap}
   {ID, VERSION} each field ->
      tuck{obj, field, new-obj[field]}
   obj

